generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  firstName     String
  lastName      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  childAccounts ChildAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  planId        String   // 'free', 'pro', 'pro_plus'
  startDate     DateTime @default(now())
  endDate       DateTime?
  isActive      Boolean  @default(true)
  stripeCustomerId String? @unique
  stripeSubscriptionId String? @unique
  stripePriceId String?
  stripeCurrentPeriodEnd DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChildAccount {
  id            String    @id @default(cuid())
  parentId      String
  parent        User      @relation(fields: [parentId], references: [id])
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
} 